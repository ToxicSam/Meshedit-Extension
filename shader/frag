uniform int outputID;
uniform sampler2D envmap;
uniform vec3 eyePos;
varying vec3 normal;
varying vec3 vertex;


#define PI 3.1415926
#define NNOISE 4
#define PALE_BLUE vec4(0.25, 0.25, 0.35, 1.0)
//#define PALE_BLUE vec4(0.90, 0.90, 1.0, 1.0)
#define MEDIUM_BLUE vec4(0.10, 0.10, 0.30, 1.0)
#define DARK_BLUE vec4(0.05, 0.05, 0.26, 1.0)
#define DARKER_BLUE vec4(0.03, 0.03, 0.20, 1.0)

vec3 shadeDiffuseFromEye();

vec3 shadePhong(vec3 lightPos);

vec3 shadePhongAmerican(vec3 lightPos);

vec3 shadeEnvmapReflection();

vec4 toonify();

vec4 cook_torrance(vec3 lightPos);

void main()
{
    if(outputID == 0)
    {
        gl_FragColor = vec4(shadeDiffuseFromEye(), 1.0);
        return;
    }
    if(outputID == 1)
    {
        gl_FragColor = vec4(shadePhong(vec3(10, 10, 10)), 1.0);
        return;
    }
    if(outputID == 2)
    {
        gl_FragColor = vec4(shadeEnvmapReflection(), 1.0);
        return;
    }
    if(outputID == 3)
    {
        gl_FragColor = vec4(shadePhongAmerican(vec3(10, 10, 10)), 1.0);
        return;
    }
    if(outputID == 4)
    {
        gl_FragColor = toonify();
        return;
    }
    if(outputID == 5)
    {
        gl_FragColor = 2.2 * cook_torrance(vec3(10, 10, 10));
        return;
    }
    // ...
}

vec3 shadeDiffuseFromEye()
{
    vec3 n = normalize(normal);
    vec3 out_vec = normalize(eyePos - vertex);
    float diffuse = abs(dot(out_vec, n));
    return vec3(diffuse);
}

vec3 shadePhong(vec3 lightPos)
{   // TODO Part 6.
    // TODO Compute Phong shading here. You can choose any color you like. But please
    // TODO make sure that you have noticeable specular highlights in the shading.
    // TODO Variables to use: eyePos, lightPos, normal, vertex

    float ia = .002; 
    float p = 32.0;

    vec3 ka = vec3(25.0,25.0,112.0);
    vec3 kd = vec3(25.0,25.0,112.0);
    vec3 ks = vec3(255.0,255.0,255.0);
  
    vec3 n = normalize(normal);
    vec3 l = normalize(lightPos - vertex);
    vec3 v = normalize(eyePos - vertex);

    float diffuseFactor = (1.0 / (distance(lightPos, vertex) * distance(lightPos, vertex))) * max(0.0, dot(n, l));

    vec3 h = normalize(v + l);

    float specularFactor = (1.0 / (distance(lightPos, vertex) * distance(lightPos, vertex))) * pow(max(0.0, dot(n, h)), p);


    return ia * ka + kd * diffuseFactor + ks * specularFactor;
}

vec3 shadePhongAmerican(vec3 lightPos)
{  
    float ia = .0005; 
    float p = 32.0;

    vec3 ka = vec3(255.0,0.0,0.0);
    vec3 kd = vec3(25.0,25.0,112.0);
    vec3 ks = vec3(255.0,255.0,255.0);
  
    vec3 n = normalize(normal);
    vec3 l = normalize(lightPos - vertex);
    vec3 v = normalize(eyePos - vertex);

    float diffuseFactor = (1.0 / (distance(lightPos, vertex) * distance(lightPos, vertex))) * max(0.0, dot(n, l));

    vec3 h = normalize(v + l);

    float specularFactor = (1.0 / (distance(lightPos, vertex) * distance(lightPos, vertex))) * pow(max(0.0, dot(n, h)), p);


    return ia * ka + kd * diffuseFactor + ks * specularFactor;
}

vec3 shadeEnvmapReflection()
{   // TODO Part 6.
    // TODO Compute environment mapping based on reflection direction here.
    // TODO First compute the reflection direction using eyePos, normal and vertex.
    // TODO Then convert the reflection direction to spherical coordinates (theta, phi). 
    // TODO Note that the up vector is along +Z axis.
    // TODO Finally, grab the color from envmap using (theta, phi).
    // TODO You will need to use function "vec4 texture2D(sampler2D tex, vec2 uv)" to 
    // TODO get colors from textures. 

    vec3 n = normalize(normal);
    vec3 i = normalize(eyePos - vertex);

    vec3 o = 2.0 * (dot(i, n)) * n - i;

    float theta = atan(o.y / o.x);
    float phi = atan(pow(pow(o.x, 2.0) + pow(o.y, 2.0),.50)/o.z);

    float u = theta / (2.0 * PI);
    float v = phi / PI;

    vec4 texcolor = texture2D(envmap, vec2(u,v));
    
    return vec3(texcolor.x, texcolor.y, texcolor.z);
}

vec4 toonify() {

    vec4 color;
    
    vec3 n = normalize(normal);
    vec3 i = normalize(eyePos - vertex);

    vec3 o = 2.0 * (dot(i, n)) * n - i;

    float theta = atan(o.y / o.x);
    float phi = atan(pow(pow(o.x, 2.0) + pow(o.y, 2.0),.50)/o.z);

    float u = theta / (2.0 * PI);
    float v = phi / PI;
    
    float intensity = dot(i, n);

    if (intensity > 0.98)
        color = vec4(0.8,0.8,0.8,1.0);
    else if (intensity > 0.5)
        color = vec4(0.4,0.4,0.8,1.0);  
    else if (intensity > 0.25)
        color = vec4(0.2,0.2,0.4,1.0);
    else
        color = vec4(0.1,0.1,0.1,1.0);      
    
    return(color);
    }

vec4 cook_torrance(vec3 lightPos) {
    float roughnessValue = 0.3; // 0 : smooth, 1: rough
    float F0 = 0.8; // fresnel reflectance at normal incidence
    float k = 0.2; // fraction of diffuse reflection (specular reflection = 1 - k)

    vec3 n = normalize(normal);
    vec3 l = normalize(lightPos - vertex);
    vec3 v = normalize(eyePos - vertex);
    //vec3 lightColor = vec3(0.245, 0.209, 0.81);
    //vec3 lightColor = vec3(0.690, 0.769, 0.87); //steel
    //vec3 lightColor = vec3(1.000, 0.843, 0.000); //gold
    //vec3 lightColor = vec3(0.753, 0.451, 0.753); //silver
    vec3 lightColor = vec3(0.722, .451, .2);
    vec3 lightDirection = normalize(lightPos - vertex);
    float NdotL = dot(n, l);
    
    float specular = 0.0;


    vec3 halfVector = normalize(l + v);
    float NdotH = dot(n, halfVector); 
    float NdotV = dot(n, v); // note: this could also be NdotL, which is the same value
    float VdotH = dot(v, halfVector);
    float mSquared = roughnessValue * roughnessValue;
        
    // geometric attenuation
    float NH2 = 2.0 * NdotH;
    float g1 = (NH2 * NdotV) / VdotH;
    float g2 = (NH2 * NdotL) / VdotH;
    float geoAtt = min(1.0, min(g1, g2));
     
    // roughness (or: microfacet distribution function)
    float r1 = 1.0 / ( 4.0 * mSquared * pow(NdotH, 4.0));
    float r2 = (NdotH * NdotH - 1.0) / (mSquared * NdotH * NdotH);
    float roughness = r1 * exp(r2);
        
    // fresnel
    float fresnel = pow(1.0 - VdotH, 5.0);
    fresnel *= (1.0 - F0);
    fresnel += F0;
        
    specular = (fresnel * geoAtt * roughness) / (NdotV * NdotL * PI);

    
    vec3 finalValue = lightColor * NdotL * (k + specular * (1.0 - k));
    return vec4(finalValue, 1.0);

}

